{"version":3,"sources":["app/modules/ad-dashboard/info/ad-dashboard-info.component.tsx","app/modules/ad-dashboard/item/ad-dashboard-item.factory.ts","app/modules/ad-dashboard/common/ad-dashboard-api.service.ts","app/modules/ad-dashboard/ad-dashboard.service.ts","app/modules/ad-dashboard/chart/ad-dashboard-chart.component.tsx","app/common/components/multi-select/multi-select.component.tsx","app/common/components/single-select/single-select.component.tsx","app/modules/ad-dashboard/filters/ad-dashboard-filters.component.tsx","app/modules/ad-dashboard/ad-dashboard.component.tsx","app.tsx","service-worker.ts","index.tsx"],"names":["AdDashboardInfoComponent","className","displayName","adDashboardItemFactory","response","campaign","clicks","dataSource","datasource","date","impressions","headerTransformDictionary","Date","Datasource","Campaign","Clicks","Impressions","adDashboardApiService","Promise","resolve","reject","Papa","parse","download","transformHeader","header","error","complete","results","data","adDashboardService","getData","then","campaigns","dataSources","items","i","length","push","createItemFromResponse","indexOf","this","groupDataByDate","filter","item","clicksSum","impressionsSum","lastDate","itemsCount","Math","round","AdDashboardChartComponent","props","height","margin","top","right","left","bottom","strokeDasharray","yAxisId","scale","dataKey","stroke","orientation","MultiSelectComponent","value","map","label","options","isMulti","onChange","values","SingleSelectComponent","option","isClearable","AdDashboardFiltersComponent","onDataSourceChange","selectedDataSources","dataSourceOptions","onCampaignChange","selectedCampaign","campaignOptions","AdDashboardComponent","useState","setData","setSelectedDataSources","setSelectedCampaign","displayData","useMemo","getDisplayData","useEffect","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8QAEMA,EAA2B,WAC7B,OACI,yBAAKC,UAAU,qBACX,uBAAGA,UAAU,2BAAb,kCACA,uBAAGA,UAAU,2BAAb,gCACA,0BAAMA,UAAU,kCAAhB,4BACA,uBAAGA,UAAU,2BAAb,+IAQZD,EAAyBE,YAAc,2BAExBF,Q,cCFAG,EADgB,I,+GAXJC,GACnB,MAAO,CACHC,SAAUD,EAASC,SACnBC,QAASF,EAASE,OAClBC,WAAYH,EAASI,WACrBC,KAAML,EAASK,KACfC,aAAcN,EAASM,iB,wBCP7BC,EAAqD,CACvDC,KAAM,OACNC,WAAY,aACZC,SAAU,WACVC,OAAQ,SACRC,YAAa,eA0BFC,EADe,I,kGAlBtB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBC,IAAKC,MAHU,0FAGQ,CACnBC,UAAU,EACVC,gBAAiB,SAASC,GACtB,OAAOd,EAA0Bc,IAAW,IAEhDA,QAAQ,EACRC,MANmB,SAMbA,GACFN,EAAOM,IAEXC,SAAU,SAASC,GACfT,EAAQS,EAAQC,gB,MC0DrBC,EADY,I,kGA5EnB,OAAOb,EAAsBc,UAAUC,MAAK,SAAA5B,GAKxC,IAJA,IAAM6B,EAAY,GACZC,EAAc,GACdC,EAAQ,GAELC,EAAI,EAAGA,EAAIhC,EAASiC,OAAQD,IAC5BhC,EAASgC,GAAG3B,OAIjB0B,EAAMG,KAAKnC,EAAuBoC,uBAAuBnC,EAASgC,MAEhB,IAA9CF,EAAYM,QAAQL,EAAMC,GAAG7B,aAC7B2B,EAAYI,KAAKH,EAAMC,GAAG7B,aAGgB,IAA1C0B,EAAUO,QAAQL,EAAMC,GAAG/B,WAC3B4B,EAAUK,KAAKH,EAAMC,GAAG/B,WAIhC,MAAO,CACH8B,QACAF,YACAC,oB,qCAKGC,EAA0BD,EAAuB7B,GAC5D,OAAOoC,KAAKC,gBACRP,EAAMQ,QAAO,SAAAC,GACT,QAAIvC,GAAYuC,EAAKvC,WAAaA,KAIe,IAA1C6B,EAAYM,QAAQI,EAAKrC,kB,sCAKpB4B,GAQpB,IARkE,IAAD,EAC3DP,EAA6B,GAE/BiB,EAAY,EACZC,EAAiB,EACjBC,GAAW,UAAAZ,EAAM,UAAN,eAAU1B,OAAQ,GAC7BuC,EAAa,EAERZ,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAcZ,IAAD,EATtB,GAJAS,GAAaV,EAAMC,GAAG9B,OACtBwC,GAAkBX,EAAMC,GAAG1B,YAC3BsC,IAEIZ,IAAMD,EAAME,OAAS,GAAKF,EAAMC,EAAI,GAAG3B,OAASsC,EAShD,GARAnB,EAAQU,KAAK,CACT7B,KAAMsC,EACNzC,OAAQ2C,KAAKC,MAAML,EAAYG,GAC/BtC,YAAauC,KAAKC,MAAMJ,EAAiBE,GACzCzC,WAAY,GACZF,SAAU,KAGV8B,EAAMC,EAAI,GACVS,EAAY,EACZC,EAAiB,EACjBC,GAAW,UAAAZ,EAAMC,EAAI,UAAV,eAAc3B,OAAQ,GACjCuC,EAAa,EAKzB,OAAOpB,M,cC3ETuB,EAA4B,SAACC,GAC/B,IAAKA,EAAMvB,KAAKQ,OACZ,OAAO,KAMX,OACI,6BACI,kBAAC,IAAD,CAAqBgB,OAAQ,KACzB,kBAAC,IAAD,CACIxB,KAAMuB,EAAMvB,KACZyB,OAAQ,CACJC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,IAGZ,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAS,EAAGC,MAAM,aAAaC,QAAQ,SAASC,OAhB7C,YAiBV,kBAAC,IAAD,CAAOH,QAAS,EAAGE,QAAQ,cAAcE,YAAY,QAAQD,OAhB9C,YAiBf,kBAAC,IAAD,CAAOD,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAMA,QAAQ,SAASF,QAAS,EAAGG,OArBzB,YAsBV,kBAAC,IAAD,CAAMD,QAAQ,cAAcF,QAAS,EAAGG,OArBzB,gBA4BnCZ,EAA0BjD,YAAc,4BAEzBiD,Q,QCpCTc,EAAuB,SAACb,GAK1B,OACI,kBAAC,IAAD,CACIc,MAAOd,EAAMc,MAAMC,KAAI,SAAAvB,GAAI,MAAK,CAACwB,MAAOxB,EAAMsB,MAAOtB,MACrDyB,QAASjB,EAAMiB,QAAQF,KAAI,SAAAvB,GAAI,MAAK,CAACsB,MAAOtB,EAAMwB,MAAOxB,MACzD0B,SAAS,EACTC,SATR,SAAkBC,GAAqB,IAAD,EAClCpB,EAAMmB,UAAS,UAACC,SAAD,eAAmBL,KAAI,SAAAvB,GAAI,OAAIA,EAAKsB,WAAU,QAarED,EAAqB/D,YAAc,uBAEpB+D,QChBTQ,EAAwB,SAACrB,GAK3B,OACI,6BACI,kBAAC,IAAD,CACIc,MAAO,CACHA,MAAOd,EAAMc,MACbE,MAAOhB,EAAMc,OAEjBG,QAASjB,EAAMiB,QAAQF,KAAI,SAAAvB,GAAI,MAAK,CAACsB,MAAOtB,EAAMwB,MAAOxB,MACzD0B,SAAS,EACTC,SAbZ,SAAkBG,GACdtB,EAAMmB,UAAe,OAANG,QAAM,IAANA,OAAA,EAAAA,EAAQR,QAAS,KAaxBS,aAAa,MAM7BF,EAAsBvE,YAAc,wBAErBuE,QCvBTG,EAA8B,SAACxB,GACjC,OACI,6BACI,sDACA,yCACA,kBAAC,EAAD,CACImB,SAAUnB,EAAMyB,mBAChBX,MAAOd,EAAM0B,oBACbT,QAASjB,EAAM2B,oBAGnB,uCACA,kBAAC,EAAD,CACIR,SAAUnB,EAAM4B,iBAChBd,MAAOd,EAAM6B,iBACbZ,QAASjB,EAAM8B,oBAM/BN,EAA4B1E,YAAc,8BAE3B0E,QCrBTO,EAAuB,WAAO,IAAD,EACPC,mBAA0B,CAC9CnD,UAAW,GACXC,YAAa,GACbC,MAAO,KAJoB,mBACxBN,EADwB,KAClBwD,EADkB,OAMuBD,mBAAmB,IAN1C,mBAMxBN,EANwB,KAMHQ,EANG,OAOiBF,mBAAS,IAP1B,mBAOxBH,EAPwB,KAONM,EAPM,KASzBC,EAAcC,mBAAQ,WACxB,OAAO3D,EAAmB4D,eAAe7D,EAAKM,MAAO2C,EAAqBG,KAC3E,CAACpD,EAAMoD,EAAkBH,IAY5B,OAVAa,qBAAU,WACN7D,EAAmBC,UAAUC,MAAK,SAAA5B,GAC9BiF,EAAQjF,QAEb,IAEHuF,qBAAU,WACNL,EAAuBzD,EAAKK,eAC7B,CAACL,EAAKK,cAGL,yBAAKjC,UAAU,gBACX,yBAAKA,UAAU,sBACX,kBAAC,EAAD,OAGJ,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,yBACX,kBAAC,EAAD,CACIiF,gBAAiBrD,EAAKI,UACtBgD,iBAAkBA,EAClBD,iBAAkBO,EAClBR,kBAAmBlD,EAAKK,YACxB4C,oBAAqBA,EACrBD,mBAAoBS,KAI5B,yBAAKrF,UAAU,uBACX,kBAAC,EAAD,CAA2B4B,KAAM2D,QAOrDL,EAAqBjF,YAAc,uBAEpBiF,QC5CAS,EAVH,WACR,OACI,yBAAK3F,UAAU,OACX,yBAAKA,UAAU,kBACX,kBAAC,EAAD,SCII4F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxE,MAAK,SAAAyE,GACjCA,EAAaC,kB","file":"static/js/main.8080acb6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst AdDashboardInfoComponent = () => {\r\n    return (\r\n        <div className=\"ad-dashboard-info\">\r\n            <p className=\"ad-dashboard-info__text\">- Select zero to N Datasources</p>\r\n            <p className=\"ad-dashboard-info__text\">- Select zero to N Campaigns</p>\r\n            <span className=\"ad-dashboard-info__text -small\">(where zero means \"ALL\")</span>\r\n            <p className=\"ad-dashboard-info__text\">\r\n                Hitting \"Apply\", filters the chart to show a timeseries for both Clicks and Impressions for given\r\n                Datasources and Campaigns - logical AND\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nAdDashboardInfoComponent.displayName = \"AdDashboardInfoComponent\";\r\n\r\nexport default AdDashboardInfoComponent;\r\n","import AdDashboardItemResponse from \"./ad-dashboard-item.response\";\r\nimport AdDashboardItem from \"./ad-dashboard-item\";\r\n\r\nclass AdDashboardItemFactory {\r\n    createItemFromResponse(response: AdDashboardItemResponse): AdDashboardItem {\r\n        return {\r\n            campaign: response.campaign,\r\n            clicks: +response.clicks,\r\n            dataSource: response.datasource,\r\n            date: response.date,\r\n            impressions: +response.impressions,\r\n        };\r\n    }\r\n}\r\n\r\nconst adDashboardItemFactory = new AdDashboardItemFactory();\r\nexport default adDashboardItemFactory;\r\n","import AdDashboardDataResponse from \"./ad-dashboard-data.response\";\nimport Papa, {ParseError} from \"papaparse\";\n\nconst headerTransformDictionary: {[key: string]: string} = {\n    Date: \"date\",\n    Datasource: \"datasource\",\n    Campaign: \"campaign\",\n    Clicks: \"clicks\",\n    Impressions: \"impressions\",\n};\n\nclass AdDashboardApiService {\n    getData(): Promise<AdDashboardDataResponse> {\n        const requestUrl = \"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\";\n\n        return new Promise((resolve, reject) => {\n            Papa.parse(requestUrl, {\n                download: true,\n                transformHeader: function(header) {\n                    return headerTransformDictionary[header] || \"\";\n                },\n                header: true,\n                error(error: ParseError): void {\n                    reject(error);\n                },\n                complete: function(results) {\n                    resolve(results.data);\n                },\n            });\n        });\n    }\n}\n\nconst adDashboardApiService = new AdDashboardApiService();\nexport default adDashboardApiService;\n","import AdDashboardItem from \"./item/ad-dashboard-item\";\r\nimport adDashboardItemFactory from \"./item/ad-dashboard-item.factory\";\r\nimport adDashboardApiService from \"./common/ad-dashboard-api.service\";\r\nimport AdDashboardData from \"./common/ad-dashboard-data\";\r\n\r\nclass AdDashboardService {\r\n    getData(): Promise<AdDashboardData> {\r\n        return adDashboardApiService.getData().then(response => {\r\n            const campaigns = [];\r\n            const dataSources = [];\r\n            const items = [];\r\n\r\n            for (let i = 0; i < response.length; i++) {\r\n                if (!response[i].date) {\r\n                    continue;\r\n                }\r\n\r\n                items.push(adDashboardItemFactory.createItemFromResponse(response[i]));\r\n\r\n                if (dataSources.indexOf(items[i].dataSource) === -1) {\r\n                    dataSources.push(items[i].dataSource);\r\n                }\r\n\r\n                if (campaigns.indexOf(items[i].campaign) === -1) {\r\n                    campaigns.push(items[i].campaign);\r\n                }\r\n            }\r\n\r\n            return {\r\n                items,\r\n                campaigns,\r\n                dataSources,\r\n            };\r\n        });\r\n    }\r\n\r\n    getDisplayData(items: AdDashboardItem[], dataSources: string[], campaign: string): AdDashboardItem[] {\r\n        return this.groupDataByDate(\r\n            items.filter(item => {\r\n                if (campaign && item.campaign !== campaign) {\r\n                    return false;\r\n                }\r\n\r\n                return dataSources.indexOf(item.dataSource) !== -1;\r\n            })\r\n        );\r\n    }\r\n\r\n    private groupDataByDate(items: AdDashboardItem[]): AdDashboardItem[] {\r\n        const results: AdDashboardItem[] = [];\r\n\r\n        let clicksSum = 0;\r\n        let impressionsSum = 0;\r\n        let lastDate = items[0]?.date || \"\";\r\n        let itemsCount = 0;\r\n\r\n        for (let i = 0; i < items.length; i++) {\r\n            clicksSum += items[i].clicks;\r\n            impressionsSum += items[i].impressions;\r\n            itemsCount++;\r\n\r\n            if (i === items.length - 1 || items[i + 1].date !== lastDate) {\r\n                results.push({\r\n                    date: lastDate,\r\n                    clicks: Math.round(clicksSum / itemsCount),\r\n                    impressions: Math.round(impressionsSum / itemsCount),\r\n                    dataSource: \"\",\r\n                    campaign: \"\",\r\n                });\r\n\r\n                if (items[i + 1]) {\r\n                    clicksSum = 0;\r\n                    impressionsSum = 0;\r\n                    lastDate = items[i + 1]?.date || \"\";\r\n                    itemsCount = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n}\r\n\r\nconst adDashboardService = new AdDashboardService();\r\nexport default adDashboardService;\r\n","import React from \"react\";\r\nimport AdDashboardChartProps from \"./ad-dashboard-chart.props\";\r\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer} from \"recharts\";\r\n\r\nconst AdDashboardChartComponent = (props: AdDashboardChartProps) => {\r\n    if (!props.data.length) {\r\n        return null;\r\n    }\r\n\r\n    const clicksStrokeColor = \"#3480eb\";\r\n    const impressionsStrokeColor = \"#012252\";\r\n\r\n    return (\r\n        <div>\r\n            <ResponsiveContainer height={300}>\r\n                <LineChart\r\n                    data={props.data}\r\n                    margin={{\r\n                        top: 5,\r\n                        right: 30,\r\n                        left: 20,\r\n                        bottom: 5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <YAxis yAxisId={0} scale=\"sequential\" dataKey=\"clicks\" stroke={clicksStrokeColor} />\r\n                    <YAxis yAxisId={1} dataKey=\"impressions\" orientation=\"right\" stroke={impressionsStrokeColor} />\r\n                    <XAxis dataKey=\"date\" />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Line dataKey=\"clicks\" yAxisId={0} stroke={clicksStrokeColor} />\r\n                    <Line dataKey=\"impressions\" yAxisId={1} stroke={impressionsStrokeColor} />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nAdDashboardChartComponent.displayName = \"AdDashboardChartComponent\";\r\n\r\nexport default AdDashboardChartComponent;\r\n","import React from \"react\";\nimport MultiSelectProps from \"./multi-select.props\";\nimport Select from \"react-select\";\n\nconst MultiSelectComponent = (props: MultiSelectProps) => {\n    function onChange(values: any | null) {\n        props.onChange((values as any[])?.map(item => item.value) || []);\n    }\n\n    return (\n        <Select\n            value={props.value.map(item => ({label: item, value: item}))}\n            options={props.options.map(item => ({value: item, label: item}))}\n            isMulti={true}\n            onChange={onChange}\n        />\n    );\n};\n\nMultiSelectComponent.displayName = \"MultiSelectComponent\";\n\nexport default MultiSelectComponent;\n","import React from \"react\";\r\nimport SingleSelectProps from \"./single-select.props\";\r\nimport Select from \"react-select\";\r\nimport SelectOption from \"../../types/select-option/select-option\";\r\n\r\nconst SingleSelectComponent = (props: SingleSelectProps) => {\r\n    function onChange(option: SelectOption | null) {\r\n        props.onChange(option?.value || \"\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Select\r\n                value={{\r\n                    value: props.value,\r\n                    label: props.value,\r\n                }}\r\n                options={props.options.map(item => ({value: item, label: item}))}\r\n                isMulti={false}\r\n                onChange={onChange as any}\r\n                isClearable={true}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nSingleSelectComponent.displayName = \"SingleSelectComponent\";\r\n\r\nexport default SingleSelectComponent;\r\n","import React from \"react\";\nimport AdDashboardFiltersProps from \"./ad-dashboard-filters.props\";\nimport MultiSelectComponent from \"../../../common/components/multi-select/multi-select.component\";\nimport SingleSelectComponent from \"../../../common/components/single-select/single-select.component\";\n\nconst AdDashboardFiltersComponent = (props: AdDashboardFiltersProps) => {\n    return (\n        <div>\n            <p>Filter dimension values</p>\n            <p>Datasource</p>\n            <MultiSelectComponent\n                onChange={props.onDataSourceChange}\n                value={props.selectedDataSources}\n                options={props.dataSourceOptions}\n            />\n\n            <p>Campaign</p>\n            <SingleSelectComponent\n                onChange={props.onCampaignChange}\n                value={props.selectedCampaign}\n                options={props.campaignOptions}\n            />\n        </div>\n    );\n};\n\nAdDashboardFiltersComponent.displayName = \"AdDashboardFiltersComponent\";\n\nexport default AdDashboardFiltersComponent;\n","import React, {useEffect, useMemo, useState} from \"react\";\r\nimport AdDashboardInfoComponent from \"./info/ad-dashboard-info.component\";\r\nimport adDashboardService from \"./ad-dashboard.service\";\r\nimport AdDashboardChartComponent from \"./chart/ad-dashboard-chart.component\";\r\nimport AdDashboardFiltersComponent from \"./filters/ad-dashboard-filters.component\";\r\nimport AdDashboardData from \"./common/ad-dashboard-data\";\r\n\r\nconst AdDashboardComponent = () => {\r\n    const [data, setData] = useState<AdDashboardData>({\r\n        campaigns: [],\r\n        dataSources: [],\r\n        items: [],\r\n    });\r\n    const [selectedDataSources, setSelectedDataSources] = useState<string[]>([]);\r\n    const [selectedCampaign, setSelectedCampaign] = useState(\"\");\r\n\r\n    const displayData = useMemo(() => {\r\n        return adDashboardService.getDisplayData(data.items, selectedDataSources, selectedCampaign);\r\n    }, [data, selectedCampaign, selectedDataSources]);\r\n\r\n    useEffect(() => {\r\n        adDashboardService.getData().then(response => {\r\n            setData(response);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setSelectedDataSources(data.dataSources);\r\n    }, [data.dataSources]);\r\n\r\n    return (\r\n        <div className=\"ad-dashboard\">\r\n            <div className=\"ad-dashboard__info\">\r\n                <AdDashboardInfoComponent />\r\n            </div>\r\n\r\n            <div className=\"ad-dashboard__main\">\r\n                <div className=\"ad-dashboard__filters\">\r\n                    <AdDashboardFiltersComponent\r\n                        campaignOptions={data.campaigns}\r\n                        selectedCampaign={selectedCampaign}\r\n                        onCampaignChange={setSelectedCampaign}\r\n                        dataSourceOptions={data.dataSources}\r\n                        selectedDataSources={selectedDataSources}\r\n                        onDataSourceChange={setSelectedDataSources}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"ad-dashboard__chart\">\r\n                    <AdDashboardChartComponent data={displayData} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nAdDashboardComponent.displayName = \"AdDashboardComponent\";\r\n\r\nexport default AdDashboardComponent;\r\n","import React from \"react\";\nimport \"./app.scss\";\nimport AdDashboardComponent from \"./app/modules/ad-dashboard/ad-dashboard.component\";\n\nconst App = () => {\n    return (\n        <div className=\"app\">\n            <div className=\"app__container\">\n                <AdDashboardComponent />\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport * as serviceWorker from \"./service-worker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}